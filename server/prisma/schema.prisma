generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider   = "prisma-dbml-generator"
  output     = "../"
  outputName = "database.dbml"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                 @id @default(autoincrement())
  email                String              @unique
  password             String
  first_name           String
  last_name            String
  admin_flag           Boolean
  admins               ClubAdmin[]
  club_discussions     ClubDiscussion[]
  club_members         ClubMember[]
  event_attendance     EventAttendance[]
  event_bookmarks      EventBookmark[]
  event_feedback       EventFeedback[]
  destination_friend   Friend[]            @relation("destination_friend_id")
  source_friend        Friend[]            @relation("source_friend_id")
  notifications        Notification[]      @relation("destination_user")
  source_notifications Notification[]      @relation("source_user")
  interests            UserInterest[]
  userReadSpotlights   UserReadSpotlight[]
}

model UserEmailVerification {
  id    Int    @id @default(autoincrement())
  email String @unique
  code  Int
}

model Club {
  id             Int              @id @default(autoincrement())
  title          String
  description    String
  membership_fee Float
  is_approved    Boolean          @default(false)
  admins         ClubAdmin[]
  categories     ClubCategory[]
  discussions    ClubDiscussion[]
  club_members   ClubMember[]
  events         Event[]
  notifications  Notification[]
}

model Category {
  id             Int            @id @default(autoincrement())
  type           String
  name           String
  clubs          ClubCategory[]
  user_interests UserInterest[]
}

model ClubCategory {
  id          Int      @id @default(autoincrement())
  club_id     Int
  category_id Int
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  club        Club     @relation(fields: [club_id], references: [id], onDelete: Cascade)
}

model ClubAdmin {
  id       Int       @id @default(autoincrement())
  club_id  Int
  user_id  Int
  position AdminType @default(Owner)
  club     Club      @relation(fields: [club_id], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model ClubDiscussion {
  id          Int      @id @default(autoincrement())
  user_id     Int
  club_id     Int
  message     String
  create_date DateTime
  club        Club     @relation(fields: [club_id], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Event {
  id               Int               @id @default(autoincrement())
  title            String
  description      String
  start_date       DateTime
  end_date         DateTime
  club_id          Int
  location         String            @default("Remote")
  private_flag     Boolean           @default(false)
  spotlight_flag Boolean @default(false)
  userReadSpotlights UserReadSpotlight[]
  club             Club              @relation(fields: [club_id], references: [id], onDelete: Cascade)
  event_attendance EventAttendance[]
  event_bookmark   EventBookmark[]
  event_feedback   EventFeedback[]
  notifications    Notification[]
}

model EventAttendance {
  id       Int   @id @default(autoincrement())
  user_id  Int
  event_id Int
  event    Event @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user     User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model EventBookmark {
  id       Int   @id @default(autoincrement())
  user_id  Int
  event_id Int
  event    Event @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user     User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model EventFeedback {
  id         Int      @id @default(autoincrement())
  event_id   Int
  feedback   String
  created    DateTime
  user_email String
  event      Event    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_email], references: [email], onDelete: Cascade)
}

model ClubMember {
  id          Int     @id @default(autoincrement())
  user_id     Int
  club_id     Int
  is_approved Boolean
  club        Club    @relation(fields: [club_id], references: [id], onDelete: Cascade)
  user        User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserInterest {
  id          Int      @id @default(autoincrement())
  user_id     Int
  category_id Int
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Notification {
  id                  Int      @id @default(autoincrement())
  destination_user_id Int
  source_user_id      Int
  club_id             Int?
  event_id            Int?
  content             String
  create_date         DateTime
  club                Club?    @relation(fields: [club_id], references: [id], onDelete: Cascade)
  destination_user    User     @relation("destination_user", fields: [destination_user_id], references: [id], onDelete: Cascade)
  event               Event?   @relation(fields: [event_id], references: [id], onDelete: Cascade)
  source_user         User     @relation("source_user", fields: [source_user_id], references: [id], onDelete: Cascade)
}

model Friend {
  id                    Int     @id @default(autoincrement())
  source_friend_id      Int
  destination_friend_id Int
  is_accepted           Boolean @default(false)
  destination_friend    User    @relation("destination_friend_id", fields: [destination_friend_id], references: [id], onDelete: Cascade)
  source_friend         User    @relation("source_friend_id", fields: [source_friend_id], references: [id], onDelete: Cascade)

  @@unique([source_friend_id, destination_friend_id])
}

model UserReadSpotlight {
  id           Int       @id @default(autoincrement())
  user_id      Int
  event_id Int
  event    Event @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum AdminType {
  Owner
  Admin
}
