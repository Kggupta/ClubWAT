// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
  output     = "../"
  outputName = "database.dbml"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int     @id @default(autoincrement())
  email       String  @unique
  password    String
  first_name  String
  last_name   String
  admin_flag  Boolean

  admins      ClubAdmin[]
  attendingEvents   AttendingEvents[]
  bookmarkedEvents  BookmarkedEvents[]
  feedbackEvents    FeedbackEvents[]
}

model UserEmailVerification {
  id    Int    @id @default(autoincrement())
  email String @unique
  code  Int
}

model Club {
  id              Int             @id @default(autoincrement())
  title           String
  description     String
  membership_fee  Float
  is_approved      Boolean        @default(false)

  categories      ClubCategory[]
  admins          ClubAdmin[]
  events          Events[]
}

model Category {
  id    Int     @id @default(autoincrement())
  type  String
  name  String
  clubs ClubCategory[]
}

model ClubCategory {
  id          Int       @id @default(autoincrement())
  club_id     Int
  category_id Int
  club        Club      @relation(fields: [club_id], references: [id])
  category    Category  @relation(fields: [category_id], references: [id])
}

model ClubAdmin {
  id          Int       @id @default(autoincrement())
  user_id     Int
  club_id     Int
  position    String
  user        User      @relation(fields: [user_id], references: [id])
  club        Club      @relation(fields: [club_id], references: [id])
}

model Events {
  id            Int       @id @default(autoincrement())
  title         String
  description   String
  start_date    DateTime
  end_date      DateTime
  club_id       Int
  club          Club      @relation(fields: [club_id], references: [id])

  feedback_events FeedbackEvents[]
  attending_events AttendingEvents[]
  bookmarked_events BookmarkedEvents[]
}

model AttendingEvents {
  id          Int    @id @default(autoincrement())
  user_email  String
  event_id    Int

  user  User  @relation(fields: [user_email], references: [email])
  event Events @relation(fields: [event_id], references: [id])
}

model BookmarkedEvents {
  id        Int    @id @default(autoincrement())
  user_id   Int
  event_id  Int

  user  User  @relation(fields: [user_id], references: [id])
  event Events @relation(fields: [event_id], references: [id])
}

model FeedbackEvents {
  id        Int      @id @default(autoincrement())
  event_id  Int
  feedback  String
  created   DateTime
  user_email String

  user  User  @relation(fields: [user_email], references: [email])
  event Events @relation(fields: [event_id], references: [id])
}